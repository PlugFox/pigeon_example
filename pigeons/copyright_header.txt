
Generated file. Do not edit manually.

Copyright (C) 2022 Plague Fox
Unauthorized copying of this project, via any medium is strictly prohibited
Proprietary and confidential
Written by Plague Fox <plugfox@gmail.dev>, 2022

Flutter calling into Android Steps:
1) Add Pigeon as a dev_dependency.
2) Make a ".dart" file outside of your "lib" directory for defining the communication interface.
3) Run pigeon on your ".dart" file to generate the required Dart and Java code. flutter pub get then flutter pub run pigeon with suitable arguments.
4) Add the generated Dart code to ./lib for compilation.
5) Add the generated Java code to your ./android/app/src/main/java directory for compilation.
6) Implement the generated Java interface for handling the calls on Android, set it up as the handler for the messages.
7) Call the generated Dart methods.

Rules for defining your communication interface:
1) The file should contain no method or function definitions, only declarations.
2) Datatypes are defined as classes with fields of the supported datatypes (see the supported Datatypes section).
3) Api's should be defined as an abstract class with either HostApi() or FlutterApi() as metadata. The former being for procedures that are defined on the host platform and the latter for procedures that are defined in Dart.
4) Method declarations on the Api classes should have one argument and a return value whose types are defined in the file or be void.

Platform channel data types support and codecs:
+ https://flutter.dev/docs/development/platform-integration/platform-channels#codec
